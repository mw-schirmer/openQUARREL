[{"path":"https://mw-schirmer.github.io/openQUARREL/articles/calibrate_validate.html","id":"user-settings","dir":"Articles","previous_headings":"","what":"User settings","title":"Calibrate and validate hydrological models","text":"","code":"library(openQUARREL) library(dplyr) # check if this is needed after loading my pacckage library(tictoc) library(hydroGOF)  # Settings ---------------------------------  # set and create base directory for output, choose an appropriate folder base_folder <- \"C:/openQuarrel/vignette\" dir.create(base_folder, recursive = TRUE, showWarnings = FALSE) setwd(base_folder)  # catchment settings HSU_ID <- \"2303\"  # use default calibration settings cal_par <- default_cal_par  # model settings # model_list = c(\"CemaNeigeGR4J\", \"CemaNeigeGR5J\", \"CemaNeigeGR6J\", \"TUW\") model_list = c(\"TUW\")  # calibration settings # todo: call it cal_crit_transfo_vec, and elsewhere also vec error_crit_transfo_list <- c(\"KGE__none\") # error_crit_transfo_list <- c(\"KGE__none\", \"KGEtang__log\",\"KGE__power__0.2\", \"KGE__power__-0.5\", \"KGE__boxcoxsantos\") cal_maximize <- TRUE cal_fn_list <- c(\"steepest_descent\") # these are all possible choices, not that Calibration_Michel can only by applied to airGR models # cal_fn_list <- c(\"Calibration_Michel\", \"steepest_descent\", \"montecarlo__random__1000\", \"montecarlo__lhs__1000\", \"montecarlo__sobol__1000\", #                  \"nlminb\", \"optim\", \"nlminb__random__100\", \"optim__random__100\", #                  \"DEoptim\", \"hydroPSO\", \"malschains\") # if parameter space should be transformed during calibration do_transfo_param <- TRUE  # validation settings val_crit_transfo <- c(\"KGE__none\", \"NSE__none\", \"VE__none\", \"pbias__none\", \"mae__none\", \"mse__none\",                       \"KGE__power__0.2\",  \"NSE__power__0.2\", \"mae__power__0.2\", \"mse__power__0.2\",                       \"KGE__boxcoxsantos\", \"NSE__boxcoxsantos\", \"mae__boxcoxsantos\", \"mse__boxcoxsantos\",                       \"KGEtang__log\", \"NSE__log\", \"mae__log\", \"mse__log\",                       \"KGE__power__-0.5\", \"NSE__power__-0.5\", \"mae__power__-0.5\", \"mse__power__-0.5\")  # a list with names and arrays of two digits describing months used to calculate # subseasonal validation metrics val_subseason <- list(spring = c(\"02\", \"03\", \"04\", \"05\"),                        summer = c(\"06\", \"07\", \"08\", \"09\"))  # for no subseasonal values take # val_subseason <- list()"},{"path":"https://mw-schirmer.github.io/openQUARREL/articles/calibrate_validate.html","id":"functions","dir":"Articles","previous_headings":"","what":"functions","title":"Calibrate and validate hydrological models","text":"","code":"# tic toc message msg_toc <- function(tic, toc, msg, info1, info2, info3) {   outmsg <- paste0(info1, \" > \", msg, \" > \", round(toc - tic, 3), \" seconds elapsed \", info2, \" with best crit: \" , round(info3, 3)) }  # wrapper function, todo exclude this from package and put this to future_water_model # todo: adapt to different input calibrate_validate <- function(model, input_data, basin_data, HSU_ID,                                 error_crit_transfo, cal_maximize, cal_fn,                                do_transfo_param = FALSE, cal_parameters = cal_par,                                val_crit_transfo = \"KGE_none\", val_subseason = list(),                                snow_module = NULL, snow_parameters = NULL) {        # calibrate and validate on main catchment -----------------------------------    # subset data   hydro_data <- list()   hydro_data$BasinObs <- input_data %>% filter(FOEN_ID == HSU_ID)   hydro_data$BasinInfo <- basin_data[[HSU_ID]]      # convert Date to POSIXct   # todo: put it into input_data already   hydro_data$BasinObs$DatesR <- as.POSIXct(hydro_data$BasinObs$DatesR)   attr(hydro_data$BasinObs$DatesR, \"tzone\") <- \"UTC\"      # create input dependent on model   input <- create_input(model, hydro_data$BasinObs, hydro_data$BasinInfo)    # split data set   split_indices <- split_data_set(     hydro_data$BasinObs,     c(\"1981-01-01\", \"1982-12-31\", \"1983-01-01\", \"2000-12-31\", \"2001-01-01\", \"2020-12-31\")   )      # start time measuring for calibration   tic(msg = paste(model, snow_module, cal_fn, error_crit_transfo), quiet = TRUE)      # create snow module and input   if (!is.null(snow_module)) {     # create snow input     snow_input <- create_input(snow_module, hydro_data$BasinObs, hydro_data$BasinInfo)   }      # todo: redundant meteo data, in hydro_data and in input, provide only BasinInfo if possible   calibration_results <- calibrate_model(     hydro_data, split_indices, model, input,     snow_module, snow_input, snow_parameters,     error_crit_transfo, cal_maximize,     cal_fn, do_transfo_param, cal_par   )         #  check if calibration results are available   if (!is.null(calibration_results)) {          # write log file and to console, for all calibrations in this catchment -----------     # name the run, i.e. a combination of snow module and hydro module     model_comb <- ifelse(is.null(snow_module), model, paste0(snow_module, \"__\", model))          # this line provides an console output     mytoc <- toc(func.toc = msg_toc, info1 = Sys.time(), info2 = \"for calibration\", info3 = calibration_results$error_crit_val)     # this lines write to file     write(msg_toc(mytoc$tic, mytoc$toc, mytoc$msg, info1 = Sys.time(), info2 = \"for calibration\", info3 = calibration_results$error_crit_val),           file = file.path(base_folder, paste0(\"log_\", HSU_ID, \".txt\")), append = TRUE     )       # save parameters --------------------------------     # create output folder for this specific calibration     output_folder <- file.path(       base_folder, HSU_ID,        model_comb, cal_fn, error_crit_transfo     )     parameter_folder <- file.path(output_folder, \"model_parameters\")     dir.create(parameter_folder, recursive = TRUE, showWarnings = FALSE)     readr::write_rds(calibration_results$model_param,                      file.path(parameter_folder, paste0(HSU_ID, \".rds\"))     )               # simulate whole period for plots and quality metrics  ------------------     # retrieve model param     runoff_param <- calibration_results$model_param          # retrieve snow module param and update precipitation input     if (!is.null(snow_module)) {              if (is.null(snow_parameters)) {         nof_param_snow <- cal_par[[snow_module]][[\"nof_param\"]]         snow_param <- calibration_results$model_param[1:nof_param_snow]         # remaining runoff model parameters         runoff_param <- calibration_results$model_param[(nof_param_snow + 1):length(calibration_results$model_param)]       } else {         # add snow parameters for storing         calibration_results$model_param <- c(snow_parameters, calibration_results$model_param)       }              # model solid precipitation       # ensure that P is present in input       if (!\"P\" %in% names(input)) stop(\"P is not an entry of a list like input\")       snow_module_results <- simulate_snow(snow_module, snow_param, snow_input)              # update precipitation with snow module surface water runoff       input$P <- snow_module_results$surface_water_runoff            }          # observed runoff     Qobs <- hydro_data$BasinObs$Qmm          # now run model     simulation_results <- simulate_model(model, runoff_param, input, Qobs = Qobs)          # merge snow module results with runoff results     if (!is.null(snow_module)) {       simulation_results <- merge_snow_runoff_sim(simulation_results, snow_module_results)     }          # performance metrics -------------------------     validation_results <- NA # initialize          # calculate performance metrics for calibration period     perf_cal <- calc_subseasonal_validation_results(val_subseason, hydro_data$BasinObs$DatesR,                                                     split_indices$ind_cal, \"calibration\",                                                     col_name = \"period\",                                                     simulation_results$Qsim, Qobs, val_crit_transfo     )          # calculate performance metrics for calibration period     perf_val <- calc_subseasonal_validation_results(val_subseason, hydro_data$BasinObs$DatesR,                                                     split_indices$ind_val, \"validation\",                                                     col_name = \"period\",                                                     simulation_results$Qsim, Qobs, val_crit_transfo     )          # combine periods in one data frame     validation_results <- dplyr::bind_rows(perf_cal, perf_val)               # save all data ------------------------     ind_list <- list()     ind_list$cal <- split_indices$ind_cal     ind_list$val <- split_indices$ind_val          # split results in calibration and validation period     simulation_results_list <- purrr::map(ind_list, ~ subset_simulations(.x, simulation_results))          # save binary results     binary_folder <- file.path(output_folder, \"binary\")     dir.create(binary_folder, recursive = TRUE, showWarnings = FALSE)     readr::write_rds(       list(         calibration = calibration_results,         simulation_val = simulation_results_list$val,         simulation_cal = simulation_results_list$cal,         sim_more_info = simulation_results$more_info,         validation = validation_results       ),       file.path(binary_folder, paste0(HSU_ID, \".rds\"))     )          # write ascii results overview     ascii_folder <- file.path(output_folder, \"ascii\")     dir.create(ascii_folder, recursive = TRUE, showWarnings = FALSE)          write_ascii(       file.path(ascii_folder, paste0(HSU_ID, \".txt\")),       calibration_results, validation_results     )          # save  plots --------------------------     figure_folder <- file.path(output_folder, \"figures\")     dir.create(figure_folder, recursive = TRUE, showWarnings = FALSE)          # calibration validation overview plot     save_cal_val_plot(       file.path(figure_folder, paste0(HSU_ID, \"_cal_val.pdf\")),       hydro_data$BasinObs, simulation_results$Qsim, split_indices     )               # airGR plots for validation and calibration time period     purrr::pwalk(list(ind_list, names(ind_list)),                  ~ save_airGR_plot(file.path(figure_folder, paste0(HSU_ID, \"_airGR_\", .y, \".pdf\")),                                    model, simulation_results, .x, hydro_data                  ))   } }"},{"path":"https://mw-schirmer.github.io/openQUARREL/articles/calibrate_validate.html","id":"load-data","dir":"Articles","previous_headings":"","what":"load data","title":"Calibrate and validate hydrological models","text":"","code":"# todo: get rid of Qm3s as this is not required  data(input_data) # todo: put a meaninful id name already in the input input_data <- input_data %>% rename(FOEN_ID = HSU_ID) # todo: get rid of HypsoData as this is not required data(basin_data)"},{"path":"https://mw-schirmer.github.io/openQUARREL/articles/calibrate_validate.html","id":"loop-over-all-settings","dir":"Articles","previous_headings":"","what":"loop over all settings","title":"Calibrate and validate hydrological models","text":"","code":"for (j in seq_along(cal_fn_list)){   for (k in seq_along(model_list)){     for (m in seq_along(error_crit_transfo_list)) {       error_crit_transfo <- error_crit_transfo_list[m]       model <- model_list[k]       cal_fn <- cal_fn_list[j]              # set snow_module to NULL       if (cal_par[[model]][[\"has_snow_module\"]]) snow_module <- NULL        cat(sprintf(\"%s > Start with %s: %s for model %s with snow module %s with target %s ...\\n\",                   Sys.time(), HSU_ID, cal_fn, model, snow_module, error_crit_transfo))              suppressWarnings(suppressMessages(calibrate_validate(model, input_data, basin_data, HSU_ID,                                           error_crit_transfo, cal_maximize, cal_fn,                                           do_transfo_param, cal_par,                                           val_crit_transfo, val_subseason)))     }   } }"},{"path":[]},{"path":"https://mw-schirmer.github.io/openQUARREL/articles/include_snow_module.html","id":"load-packages","dir":"Articles","previous_headings":"Preparations","what":"Load packages","title":"Couple a snow module to a hydrological model","text":"","code":"library(openQUARREL) library(dplyr)"},{"path":"https://mw-schirmer.github.io/openQUARREL/articles/include_snow_module.html","id":"load-data","dir":"Articles","previous_headings":"Preparations","what":"Load data","title":"Couple a snow module to a hydrological model","text":"","code":"data(input_data) data(basin_data)"},{"path":"https://mw-schirmer.github.io/openQUARREL/articles/include_snow_module.html","id":"create-a-minimum-input","dir":"Articles","previous_headings":"Preparations","what":"Create a minimum input","title":"Couple a snow module to a hydrological model","text":"","code":"# can be done as separate data set minimum_input <- input_data %>%    filter(HSU_ID == \"2303\") %>%    select(DatesR, P, T, E)  minimum_basin_info <- basin_data[[\"2303\"]] # todo: delete HypsoData in general minimum_basin_info$HypsoData <- NULL  # convert Date to POSIXct # todo: put it into input_data already, but is also good to show it here minimum_input$DatesR <- as.POSIXct(minimum_input$DatesR) attr(minimum_input$DatesR, \"tzone\") <- \"UTC\""},{"path":"https://mw-schirmer.github.io/openQUARREL/articles/include_snow_module.html","id":"choose-a-snow-module-and-a-hydrological-model-without-an-own-snow-module","dir":"Articles","previous_headings":"Preparations","what":"Choose a snow module and a hydrological model (without an own snow module)","title":"Couple a snow module to a hydrological model","text":"","code":"cal_par <- default_cal_par # todo: this needs to be changed snow_module <- \"CemaNeige\" model <- \"sacramento\""},{"path":"https://mw-schirmer.github.io/openQUARREL/articles/include_snow_module.html","id":"set-model-parameters","dir":"Articles","previous_headings":"Preparations","what":"Set model parameters","title":"Couple a snow module to a hydrological model","text":"","code":"param <- (default_cal_par[[model]]$upper + default_cal_par[[model]]$lower) / 2 print(param) #>       uztwm       uzfwm         uzk       pctim       adimp       zperc  #>  75.5000000  75.5000000   0.3000000   0.0500005   0.2000000 125.5000000  #>        rexp       lztwm       lzfsm       lzfpm        lzsk        lzpk  #>   2.5000000 250.5000000 500.5000000 500.5000000   0.1300000   0.1250500  #>       pfree  #>   0.3000000"},{"path":"https://mw-schirmer.github.io/openQUARREL/articles/include_snow_module.html","id":"set-snow-module-parameters","dir":"Articles","previous_headings":"Preparations","what":"Set snow module parameters","title":"Couple a snow module to a hydrological model","text":"","code":"snow_param <- (default_cal_par[[snow_module]]$upper + default_cal_par[[snow_module]]$lower) / 2 print(snow_param) #> [1]  0.50000 54.51825"},{"path":"https://mw-schirmer.github.io/openQUARREL/articles/include_snow_module.html","id":"create-input","dir":"Articles","previous_headings":"Preparations","what":"Create input","title":"Couple a snow module to a hydrological model","text":"","code":"# todo: check on basin_info input <- create_input(model, minimum_input, list()) %>%    suppressWarnings() %>% suppressMessages()"},{"path":"https://mw-schirmer.github.io/openQUARREL/articles/include_snow_module.html","id":"create-snow-input","dir":"Articles","previous_headings":"Preparations","what":"Create snow input","title":"Couple a snow module to a hydrological model","text":"","code":"snow_input <- create_input(snow_module, minimum_input, list()) %>%    suppressWarnings() %>% suppressMessages()"},{"path":"https://mw-schirmer.github.io/openQUARREL/articles/include_snow_module.html","id":"run-the-model-without-the-snow-module","dir":"Articles","previous_headings":"","what":"Run the model without the snow module","title":"Couple a snow module to a hydrological model","text":"","code":"sim <- simulate_model(model, param, input)"},{"path":[]},{"path":"https://mw-schirmer.github.io/openQUARREL/articles/include_snow_module.html","id":"simulate-snow-module","dir":"Articles","previous_headings":"Run the model with the snow module","what":"Simulate snow module","title":"Couple a snow module to a hydrological model","text":"Update precipitation snow module surface water runoff","code":"# simulate snow module snow_module_results <- simulate_snow(snow_module, snow_param, snow_input) %>%    suppressWarnings() %>% suppressMessages() input$P <- snow_module_results$surface_water_runoff"},{"path":"https://mw-schirmer.github.io/openQUARREL/articles/include_snow_module.html","id":"run-the-model-with-updated-input","dir":"Articles","previous_headings":"Run the model with the snow module","what":"Run the model with updated input","title":"Couple a snow module to a hydrological model","text":"Combine snow runoff results (required, just nice) output contains now also snow module results SWE, psolid, pliquid melt, more_info contains list 2, .e complete hydrological model snow module results details directly original package output.","code":"sim_update <- simulate_model(model, param, input) sim_update <- merge_snow_runoff_sim(sim_update, snow_module_results) str(sim_update) #> List of 9 #>  $ date                : Date[1:14853], format: \"1981-01-01\" \"1981-01-02\" ... #>  $ Qsim                : num [1:14853] 48.9 42.7 38.6 32.5 28.4 ... #>  $ Qobs                : NULL #>  $ SWE                 : num [1:14853] 6.05 13.87 15.07 37.63 46.31 ... #>  $ psolid              : num [1:14853] 6.05 7.82 3.9 22.56 8.68 ... #>  $ pliquid             : num [1:14853] 1.03 0 23.47 0 0 ... #>  $ melt                : num [1:14853] 0 0 2.7 0 0 ... #>  $ more_info           :List of 2 #>   ..$ output_model:List of 2 #>   .. ..$ init_model  :List of 7 #>   .. .. ..$ call        : language hydromad::hydromad(DATA = NULL, sma = sma, routing = routing, uztwm = c(1,  150), uzfwm = c(1, 150), uzk = c(0.1,| __truncated__ ... #>   .. .. ..$ parlist     :List of 13 #>   .. .. .. ..$ uztwm: num [1:2] 1 150 #>   .. .. .. ..$ uzfwm: num [1:2] 1 150 #>   .. .. .. ..$ uzk  : num [1:2] 0.1 0.5 #>   .. .. .. ..$ pctim: num [1:2] 1e-06 1e-01 #>   .. .. .. ..$ adimp: num [1:2] 0 0.4 #>   .. .. .. ..$ zperc: num [1:2] 1 250 #>   .. .. .. ..$ rexp : num [1:2] 0 5 #>   .. .. .. ..$ lztwm: num [1:2] 1 500 #>   .. .. .. ..$ lzfsm: num [1:2] 1 1000 #>   .. .. .. ..$ lzfpm: num [1:2] 1 1000 #>   .. .. .. ..$ lzsk : num [1:2] 0.01 0.25 #>   .. .. .. ..$ lzpk : num [1:2] 0.0001 0.25 #>   .. .. .. ..$ pfree: num [1:2] 0 0.6 #>   .. .. ..$ last.updated: POSIXct[1:1], format: \"2025-08-11 15:13:32\" #>   .. .. ..$ sma         : chr \"sacramento\" #>   .. .. ..$ sma.fun     : chr \"sacramento.sim\" #>   .. .. ..$ sma.formals :Dotted pair list of 24 #>   .. .. .. ..$ DATA        : symbol  #>   .. .. .. ..$ uztwm       : symbol  #>   .. .. .. ..$ uzfwm       : symbol  #>   .. .. .. ..$ uzk         : symbol  #>   .. .. .. ..$ pctim       : symbol  #>   .. .. .. ..$ adimp       : symbol  #>   .. .. .. ..$ zperc       : symbol  #>   .. .. .. ..$ rexp        : symbol  #>   .. .. .. ..$ lztwm       : symbol  #>   .. .. .. ..$ lzfsm       : symbol  #>   .. .. .. ..$ lzfpm       : symbol  #>   .. .. .. ..$ lzsk        : symbol  #>   .. .. .. ..$ lzpk        : symbol  #>   .. .. .. ..$ pfree       : symbol  #>   .. .. .. ..$ etmult      : num 1 #>   .. .. .. ..$ dt          : num 1 #>   .. .. .. ..$ uztwc_0     : num 0.5 #>   .. .. .. ..$ uzfwc_0     : num 0.5 #>   .. .. .. ..$ lztwc_0     : num 0.5 #>   .. .. .. ..$ lzfsc_0     : num 0.5 #>   .. .. .. ..$ lzfpc_0     : num 0.5 #>   .. .. .. ..$ adimc_0     : num 0.5 #>   .. .. .. ..$ min_ninc    : num 20 #>   .. .. .. ..$ return_state: logi FALSE #>   .. .. ..$ warmup      : num 100 #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"hydromad.sacramento\" \"hydromad\" #>   .. ..$ fitted_model:List of 9 #>   .. .. ..$ call        : language hydromad::hydromad(DATA = (zoo::read.zoo(input[ind, ]))(), sma = sma, routing = routing,      uztwm = 75.5, uzfwm| __truncated__ ... #>   .. .. ..$ parlist     :List of 13 #>   .. .. .. ..$ uztwm: num 75.5 #>   .. .. .. ..$ uzfwm: num 75.5 #>   .. .. .. ..$ uzk  : num 0.3 #>   .. .. .. ..$ pctim: num 0.05 #>   .. .. .. ..$ adimp: num 0.2 #>   .. .. .. ..$ zperc: num 126 #>   .. .. .. ..$ rexp : num 2.5 #>   .. .. .. ..$ lztwm: num 250 #>   .. .. .. ..$ lzfsm: num 500 #>   .. .. .. ..$ lzfpm: num 500 #>   .. .. .. ..$ lzsk : num 0.13 #>   .. .. .. ..$ lzpk : num 0.125 #>   .. .. .. ..$ pfree: num 0.3 #>   .. .. ..$ last.updated: POSIXct[1:1], format: \"2025-08-11 15:13:32\" #>   .. .. ..$ sma         : chr \"sacramento\" #>   .. .. ..$ sma.fun     : chr \"sacramento.sim\" #>   .. .. ..$ sma.formals :Dotted pair list of 24 #>   .. .. .. ..$ DATA        : symbol  #>   .. .. .. ..$ uztwm       : symbol  #>   .. .. .. ..$ uzfwm       : symbol  #>   .. .. .. ..$ uzk         : symbol  #>   .. .. .. ..$ pctim       : symbol  #>   .. .. .. ..$ adimp       : symbol  #>   .. .. .. ..$ zperc       : symbol  #>   .. .. .. ..$ rexp        : symbol  #>   .. .. .. ..$ lztwm       : symbol  #>   .. .. .. ..$ lzfsm       : symbol  #>   .. .. .. ..$ lzfpm       : symbol  #>   .. .. .. ..$ lzsk        : symbol  #>   .. .. .. ..$ lzpk        : symbol  #>   .. .. .. ..$ pfree       : symbol  #>   .. .. .. ..$ etmult      : num 1 #>   .. .. .. ..$ dt          : num 1 #>   .. .. .. ..$ uztwc_0     : num 0.5 #>   .. .. .. ..$ uzfwc_0     : num 0.5 #>   .. .. .. ..$ lztwc_0     : num 0.5 #>   .. .. .. ..$ lzfsc_0     : num 0.5 #>   .. .. .. ..$ lzfpc_0     : num 0.5 #>   .. .. .. ..$ adimc_0     : num 0.5 #>   .. .. .. ..$ min_ninc    : num 20 #>   .. .. .. ..$ return_state: logi FALSE #>   .. .. ..$ warmup      : num 0 #>   .. .. ..$ data        :'zooreg' series from 1981-01-01 to 2021-08-31 #>   Data: num [1:14853, 1:3] 1.03 0 26.17 0 0 ... #>   .. .. .. ..- attr(*, \"dimnames\")=List of 2 #>   .. .. .. .. ..$ : NULL #>   .. .. .. .. ..$ : chr [1:3] \"P\" \"E\" \"T\" #>   Index:  POSIXct[1:14853], format: \"1981-01-01\" ... #>   Frequency: 1.15740740740741e-05  #>   .. .. ..$ U           :'zooreg' series from 1981-01-01 to 2021-08-31 #>   Data: num [1:14853] 48.9 42.7 38.6 32.5 28.4 ... #>   Index:  POSIXct[1:14853], format: \"1981-01-01\" ... #>   Frequency: 1.15740740740741e-05  #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"hydromad.sacramento\" \"hydromad\" #>   ..$ snow_module :List of 3 #>   .. ..$ DatesR         : POSIXlt[1:14853], format: \"1981-01-01\" \"1981-01-02\" ... #>   .. ..$ CemaNeigeLayers:List of 1 #>   .. .. ..$ Layer01:List of 11 #>   .. .. .. ..$ Pliq        : num [1:14853] 1.03 0 23.47 0 0 ... #>   .. .. .. ..$ Psol        : num [1:14853] 6.05 7.82 3.9 22.56 8.68 ... #>   .. .. .. ..$ SnowPack    : num [1:14853] 6.05 13.87 15.07 37.63 46.31 ... #>   .. .. .. ..$ ThermalState: num [1:14853] -0.21 -1.38 0 -0.58 -2.72 ... #>   .. .. .. ..$ Gratio      : num [1:14853] 0.0196 0.045 0.0489 0.1221 0.1502 ... #>   .. .. .. ..$ PotMelt     : num [1:14853] 0 0 17.8 0 0 ... #>   .. .. .. ..$ Melt        : num [1:14853] 0 0 2.7 0 0 ... #>   .. .. .. ..$ PliqAndMelt : num [1:14853] 1.03 0 26.17 0 0 ... #>   .. .. .. ..$ Temp        : num [1:14853] -0.42 -2.55 2.43 -1.16 -4.86 ... #>   .. .. .. ..$ Gthreshold  : num [1:14853] 308 308 308 308 308 ... #>   .. .. .. ..$ Glocalmax   : num [1:14853] -1000 -1000 -1000 -1000 -1000 ... #>   .. ..$ StateEnd       :List of 3 #>   .. .. ..$ Store          :List of 4 #>   .. .. .. ..$ Prod: num NA #>   .. .. .. ..$ Rout: num NA #>   .. .. .. ..$ Exp : num NA #>   .. .. .. ..$ Int : num NA #>   .. .. ..$ UH             :List of 2 #>   .. .. .. ..$ UH1: num [1:20] NA NA NA NA NA NA NA NA NA NA ... #>   .. .. .. ..$ UH2: num [1:40] NA NA NA NA NA NA NA NA NA NA ... #>   .. .. ..$ CemaNeigeLayers:List of 4 #>   .. .. .. ..$ G      : num 1.13e-05 #>   .. .. .. ..$ eTG    : num 0 #>   .. .. .. ..$ Gthr   : num NA #>   .. .. .. ..$ Glocmax: num NA #>   .. .. ..- attr(*, \"class\")= chr [1:3] \"IniStates\" \"CemaNeige\" \"daily\" #>   .. ..- attr(*, \"class\")= chr [1:3] \"OutputsModel\" \"daily\" \"CemaNeige\" #>  $ surface_water_runoff: num [1:14853] 1.03 0 26.17 0 0 ..."},{"path":"https://mw-schirmer.github.io/openQUARREL/articles/include_snow_module.html","id":"plot-results","dir":"Articles","previous_headings":"","what":"Plot results","title":"Couple a snow module to a hydrological model","text":"simple plot simulated discharge (red) without (black) snow module, skipping first ~3 years (warm-):","code":"plot(sim$date[3*365:length(sim$date)], sim$Qsim[3*365:length(sim$date)], type = \"l\", main = \"Simulated Discharge\", ylab = \"Q [mm/d]\", xlab = \"Date\") lines(sim_update$date[3*365:length(sim$date)], sim_update$Qsim[3*365:length(sim$date)], col=\"red\")"},{"path":"https://mw-schirmer.github.io/openQUARREL/articles/include_snow_module.html","id":"next-steps","dir":"Articles","previous_headings":"","what":"Next steps","title":"Couple a snow module to a hydrological model","text":"Now different hydrological model (todo: link list) … proceed vignette(\"calibrate_validate\").","code":""},{"path":[]},{"path":"https://mw-schirmer.github.io/openQUARREL/articles/run_model_minimalistic.html","id":"load-packages","dir":"Articles","previous_headings":"Preparations","what":"Load packages","title":"Run a hydrological model (minimalistic example)","text":"","code":"library(openQUARREL) library(dplyr)"},{"path":"https://mw-schirmer.github.io/openQUARREL/articles/run_model_minimalistic.html","id":"load-data","dir":"Articles","previous_headings":"Preparations","what":"Load data","title":"Run a hydrological model (minimalistic example)","text":"","code":"data(input_data) data(basin_data)"},{"path":"https://mw-schirmer.github.io/openQUARREL/articles/run_model_minimalistic.html","id":"create-a-minimum-input","dir":"Articles","previous_headings":"Preparations","what":"Create a minimum input","title":"Run a hydrological model (minimalistic example)","text":"data frame minimum_input contains columns P precipitation mm/d, T air temperature degrees Celsius E potential evapotranspiration mm/d. See also great airGR get started documentation. need calculate E, functions available, e.g. airGR::PE_Oudin. basin information minimum_basin_info one needs list … 2303, Thur Jonschwil, Mühlau, 493","code":"# can be done as separate data set minimum_input <- input_data %>%    filter(HSU_ID == \"2303\") %>%    select(DatesR, P, T, E)  minimum_basin_info <- basin_data[[\"2303\"]] # todo: delete HypsoData in general minimum_basin_info$HypsoData <- NULL  # convert Date to POSIXct # todo: put it into input_data already, but is also good to show it here minimum_input$DatesR <- as.POSIXct(minimum_input$DatesR) attr(minimum_input$DatesR, \"tzone\") <- \"UTC\""},{"path":"https://mw-schirmer.github.io/openQUARREL/articles/run_model_minimalistic.html","id":"choose-a-hydrological-model","dir":"Articles","previous_headings":"Preparations","what":"Choose a hydrological model","title":"Run a hydrological model (minimalistic example)","text":"","code":"cal_par <- default_cal_par # todo: this needs to be changed model <- \"TUW\""},{"path":"https://mw-schirmer.github.io/openQUARREL/articles/run_model_minimalistic.html","id":"set-model-parameters","dir":"Articles","previous_headings":"Preparations","what":"Set model parameters","title":"Run a hydrological model (minimalistic example)","text":"Create parameter set, middle points provided intervals. See TUWmodel documentation parameter explanation. list default_cal_par loaded library(openQUARREL) holds model calibration specific settings.","code":"param <- (default_cal_par[[model]]$upper + default_cal_par[[model]]$lower) / 2 print(param) #>    SCF    DDF     Tr     Ts     Tm  LPrat     FC   BETA     k0     k1     k2  #>    1.2    2.5    2.0   -1.0    0.0    0.5  300.0   10.0    1.0   16.0  140.0  #>   lsuz  cperc   bmax croute  #>   50.5    4.0   15.0   25.0"},{"path":"https://mw-schirmer.github.io/openQUARREL/articles/run_model_minimalistic.html","id":"create-input","dir":"Articles","previous_headings":"Preparations","what":"Create input","title":"Run a hydrological model (minimalistic example)","text":"done specifically model/package requirement, TUWmodel.","code":"# todo: check on basin_info input <- create_input(model, minimum_input, list())"},{"path":"https://mw-schirmer.github.io/openQUARREL/articles/run_model_minimalistic.html","id":"run-the-model","dir":"Articles","previous_headings":"","what":"Run the model","title":"Run a hydrological model (minimalistic example)","text":"output list fields date, Qsim, Qobs, SWE, psolid, pliquid, melt, more_info. can access typical components simulated discharge Qsim, provided input also observed discharge Qobs. snow module integrated model chosen added (see vignette(\"include_snow_module\")) snow water equivalent SWE, partitioned precipitation fluxes pliquid psolid, snow melt flux. element more_info specific chosen model package, case TUWmodel.","code":"sim <- simulate_model(model, param, input) str(sim) #> List of 8 #>  $ date     : Date[1:14853], format: \"1981-01-01\" \"1981-01-02\" ... #>  $ Qsim     : num [1:14853] 0.000362 0.001447 0.003247 0.005758 0.008975 ... #>  $ Qobs     : NULL #>  $ SWE      : num [1:14853] 6.85 16.24 10.16 37.23 47.65 ... #>  $ psolid   : num [1:14853] 5.71 7.82 0 22.56 8.68 ... #>  $ pliquid  : num [1:14853] 1.37 0 27.37 0 0 ... #>  $ melt     : num [1:14853] 0 0 6.08 0 0 ... #>  $ more_info:List of 1 #>   ..$ output_model:List of 22 #>   .. ..$ itsteps: int 14853 #>   .. ..$ nzones : int 1 #>   .. ..$ area   : num 1 #>   .. ..$ param  : num [1, 1:15] 1.2 2.5 2 -1 0 0.5 300 10 1 16 ... #>   .. .. ..- attr(*, \"dimnames\")=List of 2 #>   .. .. .. ..$ : NULL #>   .. .. .. ..$ : chr [1:15] \"SCF\" \"DDF\" \"Tr\" \"Ts\" ... #>   .. .. ..- attr(*, \"names\")= chr [1:15] \"SCF\" \"DDF\" \"Tr\" \"Ts\" ... #>   .. ..$ incon  : num [1, 1:4] 50 0 2.5 2.5 #>   .. .. ..- attr(*, \"names\")= chr [1:4] \"SSM0\" \"SWE0\" \"SUZ0\" \"SLZ0\" #>   .. ..$ prec   : num [1:14853] 7.08 7.82 27.37 22.56 8.68 ... #>   .. ..$ airt   : num [1:14853] -0.42 -2.55 2.43 -1.16 -4.86 ... #>   .. ..$ ep     : num [1:14853] 0.6 0.32 0.98 0.51 0.02 0.13 0 0 0 0.28 ... #>   .. ..$ output : num [1, 1:20, 1:14853] 3.62e-04 6.85 5.14e+01 1.37 5.71 ... #>   .. ..$ qzones : num [1, 1:14853] 0.000362 0.001447 0.003247 0.005758 0.008975 ... #>   .. ..$ q      : num [1, 1:14853] 0.000362 0.001447 0.003247 0.005758 0.008975 ... #>   .. ..$ swe    : num [1, 1:14853] 6.85 16.24 10.16 37.23 47.65 ... #>   .. ..$ melt   : num [1, 1:14853] 0 0 6.08 0 0 ... #>   .. ..$ q0     : num [1, 1:14853] 0 0 0 0 0 0 0 0 0 0 ... #>   .. ..$ q1     : num [1, 1:14853] 0 0 0 0 0 0 0 0 0 0 ... #>   .. ..$ q2     : num [1, 1:14853] 0.0355 0.0352 0.035 0.0347 0.0345 ... #>   .. ..$ moist  : num [1, 1:14853] 51.4 51.4 84.3 84.3 84.3 ... #>   .. ..$ rain   : num [1, 1:14853] 1.37 0 27.37 0 0 ... #>   .. ..$ snow   : num [1, 1:14853] 5.71 7.82 0 22.56 8.68 ... #>   .. ..$ eta    : num [1, 1:14853] 0 0 0.554 0 0 ... #>   .. ..$ suz    : num [1, 1:14853] 0 0 0 0 0 0 0 0 0 0 ... #>   .. ..$ slz    : num [1, 1:14853] 4.96 4.93 4.89 4.86 4.83 ..."},{"path":"https://mw-schirmer.github.io/openQUARREL/articles/run_model_minimalistic.html","id":"plot-results","dir":"Articles","previous_headings":"","what":"Plot results","title":"Run a hydrological model (minimalistic example)","text":"simple plot simulated discharge skipping first ~3 years (warm-):","code":"plot(sim$date[3*365:length(sim$date)], sim$Qsim[3*365:length(sim$date)], type = \"l\", main = \"Simulated Discharge\", ylab = \"Q [mm/d]\", xlab = \"Date\")"},{"path":"https://mw-schirmer.github.io/openQUARREL/articles/run_model_minimalistic.html","id":"next-steps","dir":"Articles","previous_headings":"","what":"Next steps","title":"Run a hydrological model (minimalistic example)","text":"Now different hydrological model (todo: link list) … proceed vignette(\"include_snow_module\").","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Michael Schirmer. Author, maintainer. Dorothea Hug Peter. Author. Florian Lustenberger. Author. Massimiliano Zappa. Funder.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Schirmer M, Hug Peter D, Lustenberger F (2025). openQUARREL: Meta-Package Integrating Several Hydrological Model Packages R. R package version 1.0.1, https://mw-schirmer.github.io/openQUARREL/.","code":"@Manual{,   title = {openQUARREL: A Meta-Package Integrating Several Hydrological Model Packages in R},   author = {Michael Schirmer and Dorothea {Hug Peter} and Florian Lustenberger},   year = {2025},   note = {R package version 1.0.1},   url = {https://mw-schirmer.github.io/openQUARREL/}, }"},{"path":"https://mw-schirmer.github.io/openQUARREL/index.html","id":"openquarrel","dir":"","previous_headings":"","what":"A Meta-Package Integrating Several Hydrological Model Packages in R","title":"A Meta-Package Integrating Several Hydrological Model Packages in R","text":"Meta-Package Integrating Several Hydrological Model Packages R. R meta-package lumped conceptual models developed based review R-packages therein stated aim “[…] run packages R architecture” (Astagneau et al., 2021). far models restricted daily input. called openQUARREL (QUantifying Reducing uncertainties R package providing Ensemble hydrological modeLs) combines hydrological model packages, applies several calibration routines offers evaluation tool. heavily relies external packages airGR, hydromad, TUWmodel topmodel hydrological models. Similarly, calibration external packages integrated DEoptim, hydroPSO others. objective functions uses hydroGOF package, applies great plots airGR models packages. Overview","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A Meta-Package Integrating Several Hydrological Model Packages in R","text":"can install development version openQUARREL like : Currently, dependent airGR version 1.6.12 hydromad 0.9-26. author currently contacting developers also able include newest versions. hydromad package automatically installed github folder using oldstable branch. airGR package version 1.6.12 needs installed CRAN archive like , previously installation openQUARREL: Similarly, topmodel recently removed CRAN can installed like : Now can install openQUARREL","code":"install.packages(\"https://cran.r-project.org/src/contrib/Archive/airGR/airGR_1.6.12.tar.gz\", repos = NULL, type = \"source\") install.packages(\"https://cran.r-project.org/src/contrib/Archive/topmodel/topmodel_0.7.5.tar.gz\", repos = NULL, type = \"source\") remotes::install_local(\"../openQUARREL_1.0.1.tar.gz\", dependencies = TRUE)"},{"path":"https://mw-schirmer.github.io/openQUARREL/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"A Meta-Package Integrating Several Hydrological Model Packages in R","text":"basic example shows run hydrological models vignette(\"run_model_minimalistic\").","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/index.html","id":"your-contribution","dir":"","previous_headings":"","what":"Your contribution","title":"A Meta-Package Integrating Several Hydrological Model Packages in R","text":"want model included simply need code snippet example done assets (Astagneau et al., 2021). provided example prepare data run model TUWmodel package.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/calc_crit.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Performance Criterion — calc_crit","title":"Calculate Performance Criterion — calc_crit","text":"Computes performance criterion comparing simulated observed runoff. criterion \"KGEtang\", uses KGEtang function. Otherwise, delegates calc_hydroGOF() supported criteria.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/calc_crit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Performance Criterion — calc_crit","text":"","code":"calc_crit(error_crit, Qsim, Qobs)"},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/calc_crit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Performance Criterion — calc_crit","text":"error_crit string specifying error criterion compute. Supported values include \"KGEtang\" criterion accepted calc_hydroGOF(). Qsim numeric vector simulated runoff values. Qobs numeric vector observed runoff values.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/calc_crit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Performance Criterion — calc_crit","text":"numeric value representing selected performance criterion.","code":""},{"path":[]},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/calc_crit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Performance Criterion — calc_crit","text":"","code":"Qsim <- c(1, 2, 3, 4, 5) Qobs <- c(1.1, 2.1, 2.9, 4.2, 5.1) calc_crit(\"KGEtang\", Qsim, Qobs) #> [1] 0.948507"},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/calc_hydroGOF.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper function around hydroGOF functions — calc_hydroGOF","title":"Wrapper function around hydroGOF functions — calc_hydroGOF","text":"Calculates Goodness--Fit functions two runoff series","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/calc_hydroGOF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper function around hydroGOF functions — calc_hydroGOF","text":"","code":"calc_hydroGOF(GOF_fun, Qsim, Qobs, na.rm = TRUE)"},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/calc_hydroGOF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper function around hydroGOF functions — calc_hydroGOF","text":"GOF_fun function, (todo consider functional) string function name, format GOF_fun(Qsim, Qobs, na.rm = \"TRUE\"), typically hydroGOF package Qsim vector, matrix, data.frame etc simulated runoff values Qobs vector, matrix, data.frame etc observed runoff values na.rm logical value indicating NA removed","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/calc_hydroGOF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper function around hydroGOF functions — calc_hydroGOF","text":"transformed runoff format input","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/calc_hydroGOF.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Wrapper function around hydroGOF functions — calc_hydroGOF","text":"function requires hydroGOF package installed. imported package depends deprecated packages sp etc.","code":""},{"path":[]},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/calc_hydroGOF.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrapper function around hydroGOF functions — calc_hydroGOF","text":"","code":"# hydroGOF must be loaded library(hydroGOF) calc_hydroGOF(KGE, 1:10, seq(0, 9)) #> [1] 0.7777778 # this is NA calc_hydroGOF(\"KGE\", 1:10, rep(0, 10)) #> Warning: the standard deviation is zero #> [1] NA # this is also NA calc_hydroGOF(KGE, 1:10, as.numeric(rep(NA, 10))) #> Warning: 'sim' and 'obs' are empty or they do not have any common pair of elements with data !! #> Warning: There are no pairs of 'sim' and 'obs' without missing values ! #> [1] NA"},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/calc_subseasonal_validation_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Subseasonal Validation Metrics — calc_subseasonal_validation_results","title":"Calculate Subseasonal Validation Metrics — calc_subseasonal_validation_results","text":"Computes validation metrics specified subseasonal periods within hydrological dataset. named period val_subseason, function subsets data using provided indices calculates performance metrics using calc_validation_results.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/calc_subseasonal_validation_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Subseasonal Validation Metrics — calc_subseasonal_validation_results","text":"","code":"calc_subseasonal_validation_results(   val_subseason,   dates,   ind,   period_name,   col_name = \"period\",   Qsim,   Qobs,   val_crit_transfo = \"KGE__none\" )"},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/calc_subseasonal_validation_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Subseasonal Validation Metrics — calc_subseasonal_validation_results","text":"val_subseason named list element character vector two-digit month codes (e.g., \"06\", \"07\") defining months subseasonal period. dates vector dates (e.g., class Date POSIXct) corresponding time series. ind vector indices used subset hydrological data. period_name string indicating name period (e.g., \"calibration\" \"validation\"), added column output. col_name string specifying name additional column added output (default \"period\"). Qsim numeric vector simulated runoff values. Qobs numeric vector observed runoff values. val_crit_transfo character vector specifying validation criteria runoff transformations, separated \"__\". Optionally, third part can specify lambda parameter. Supported criteria hydroGOF package must compatible calc_hydroGOF. Supported transformations described transfo_q.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/calc_subseasonal_validation_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Subseasonal Validation Metrics — calc_subseasonal_validation_results","text":"data frame similar output validate_model, two additional columns: one subseasonal period (e.g., \"spring\", \"summer\") one period name (e.g., \"calibration\"), specified col_name period_name.","code":""},{"path":[]},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/calc_subseasonal_validation_results.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Subseasonal Validation Metrics — calc_subseasonal_validation_results","text":"","code":"perf_cal <- calc_subseasonal_validation_results(   val_subseason = list(     spring = c(\"02\", \"03\", \"04\", \"05\"),     summer = c(\"06\", \"07\", \"08\", \"09\")   ),   dates = hydro_data$BasinObs$DatesR,   ind = split_indices$ind_cal,   period_name = \"calibration\",   col_name = \"period\",   Qsim = simulation_results$Qsim,   Qobs = Qobs,   val_crit_transfo = c(     \"KGE__none\", \"NSE__none\", \"VE__none\", \"pbias__none\",     \"KGE__inv\", \"NSE__inv\",     \"KGE__sqrt\", \"NSE__sqrt\"   ) ) #> Error in purrr::map(val_subseason, ~find_monthly_indices(dates, .x, ind)): ℹ In index: 1. #> ℹ With name: spring. #> Caused by error in `data.frame()`: #> ! object 'hydro_data' not found"},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/calc_validation_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Hydrological Model Performance — calc_validation_results","title":"Validate Hydrological Model Performance — calc_validation_results","text":"Calculates validation metrics simulated versus observed runoff using various transformation types.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/calc_validation_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Hydrological Model Performance — calc_validation_results","text":"","code":"calc_validation_results(   ind,   period_name,   col_name = \"period\",   Qsim,   Qobs,   val_crit_transfo = \"KGE__none\" )"},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/calc_validation_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Hydrological Model Performance — calc_validation_results","text":"Qsim numeric vector simulated runoff values. Qobs numeric vector observed runoff values. val_crit_transfo character vector specifying validation criteria runoff transformations, separated \"__\". Optionally, third part can specify lambda parameter. Supported criteria hydroGOF package must compatible calc_hydroGOF. Supported transformations described transfo_q.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/calc_validation_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Hydrological Model Performance — calc_validation_results","text":"long-format data frame columns: crit – validation criterion used (e.g., \"KGE\", \"NSE\"). transfo – runoff transformation applied (e.g., \"log\", \"inv\", \"none\"). lambda – lambda parameter used transformation, applicable. value – resulting validation metric value.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/calc_validation_results.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate Hydrological Model Performance — calc_validation_results","text":"function splits entry val_crit_transfo components: validation criterion, transformation type, optionally lambda value. applies transformation Qsim Qobs, computes specified metric, returns results tidy format.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/calc_validation_results.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate Hydrological Model Performance — calc_validation_results","text":"","code":"validate_model(   Qsim = 1:10,   Qobs = seq(2, 11),   val_crit_transfo = c(\"KGE__log\", \"NSE__inv\", \"VE__none\", \"pbias__none\") ) #> # A tibble: 4 × 4 #>   crit  transfo lambda   value #>   <chr> <chr>   <chr>    <dbl> #> 1 KGE   log     NA       0.650 #> 2 NSE   inv     NA      -0.930 #> 3 VE    none    NA       0.846 #> 4 pbias none    NA     -15.4"},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/calibrate_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Calibrate a Hydrological Model — calibrate_model","title":"Calibrate a Hydrological Model — calibrate_model","text":"Performs calibration hydrological model using specified optimization algorithm. Supports models airGR, TUWmodel, hydromad, topmodel packages, optional snow module integration. function supports native calibration routines (e.g., Calibration_Michel airGR) general-purpose optimizers (e.g., DEoptim, hydroPSO, malschains).","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/calibrate_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calibrate a Hydrological Model — calibrate_model","text":"","code":"calibrate_model(   hydro_data,   split_indices,   model,   input,   snow_module = NULL,   snow_input = NULL,   snow_parameters = NULL,   error_crit_transfo = \"KGE__none\",   cal_maximize = TRUE,   cal_fn = \"DEoptim\",   do_transfo_param = FALSE,   cal_par = default_cal_par )"},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/calibrate_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calibrate a Hydrological Model — calibrate_model","text":"hydro_data list data frame containing observed runoff meteorological data, typically loaded using load_meteo_data. split_indices list index vectors (e.g., split_data_set) indicating warm-calibration periods. model string specifying hydrological model calibrate. input list model input data, typically created using create_input. snow_module Optional. string specifying snow module (e.g., \"CemaNeige\"). snow_input Optional. Input data snow module. snow_parameters Optional. vector fixed snow parameters. NULL, snow parameters assumed part calibration. error_crit_transfo string combining error criterion runoff transformation, separated \"__\" (e.g., \"KGE__none\"). Optionally, third value (e.g., lambda) can included transformations like Box-Cox. cal_maximize Logical. TRUE, calibration maximizes objective function. cal_fn string specifying calibration function. Supported options include \"Calibration_Michel\" (airGR models), \"DEoptim\", \"hydroPSO\", \"malschains\", supported optimizers. do_transfo_param Logical. TRUE, parameters transformed unit hypercube calibration. cal_par list calibration settings specific chosen calibration function. Defaults default_cal_par, can customized user.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/calibrate_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calibrate a Hydrological Model — calibrate_model","text":"list containing: model_param: Calibrated model parameters. error_crit_transfo: error criterion transformation used. error_crit_val: final value error criterion. cal_fn: calibration function used. do_transfo_param: Whether parameter transformation applied. duration: Duration calibration process. cal_par: Calibration settings used. more_info: Additional model- method-specific output.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/calibrate_model.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Calibrate a Hydrological Model — calibrate_model","text":"Calibration_Michel available airGR models. Calibration_Michel used, parameters assumed transformed. function supports power Box-Cox runoff transformations, lambda optionally specified. Future improvements may simplify access cal_par end users.","code":""},{"path":[]},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/calibrate_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calibrate a Hydrological Model — calibrate_model","text":"","code":"if (FALSE) { calibration_results <- calibrate_model(   hydro_data = hydro_data,   split_indices = split_data_set(...),   model = \"GR4J\",   input = create_input(...),   error_crit_transfo = \"KGE__none\",   cal_maximize = TRUE,   cal_fn = \"DEoptim\",   do_transfo_param = TRUE,   cal_par = default_cal_par ) }"},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/call_cal_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Call Calibration Function for Hydrological Model — call_cal_fn","title":"Call Calibration Function for Hydrological Model — call_cal_fn","text":"Executes specified optimization algorithm calibrate hydrological model. Supports multiple calibration methods Monte Carlo sampling strategies.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/call_cal_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Call Calibration Function for Hydrological Model — call_cal_fn","text":"","code":"call_cal_fn(   cal_fn,   hydro_data,   split_indices,   model,   input,   snow_module = NULL,   snow_input = NULL,   snow_parameters = NULL,   error_crit,   cal_maximize,   cal_q_transfo,   lambda,   do_transfo_param,   cal_par = default_cal_par )"},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/call_cal_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Call Calibration Function for Hydrological Model — call_cal_fn","text":"cal_fn string specifying calibration function method use. Supported options include \"DEoptim\", \"hydroPSO\", \"malschains\". Monte Carlo variants can specified using format \"method__sampling__nruns\". hydro_data list data frame containing observed runoff data, typically loaded using load_meteo_data. split_indices list index vectors (e.g., split_data_set) indicating warm-calibration periods. model string specifying hydrological model calibrate. input list model input data, typically created using create_input. snow_module Optional. string specifying snow module used (e.g., \"CemaNeige\"). snow_input Optional. Input data snow module. snow_parameters Optional. Initial fixed parameters snow module. error_crit string naming error criterion function (e.g., \"KGE\"). Must compatible calc_hydroGOF hydroGOF package. cal_maximize Logical. TRUE, calibration maximizes objective function. cal_q_transfo string indicating runoff transformed (see transfo_q). lambda Optional. numeric value vector used regularization multi-objective weighting. do_transfo_param Logical. TRUE, parameters transformed unit hypercube calibration. cal_par list calibration settings specific chosen calibration function. Defaults default_cal_par, can customized user.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/call_cal_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Call Calibration Function for Hydrological Model — call_cal_fn","text":"list object containing results calibration, including optimized parameters performance metrics.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/call_cal_fn.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Call Calibration Function for Hydrological Model — call_cal_fn","text":"function requires hydroPSO package installed. imported package depends deprecated packages sp etc.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/call_cal_fn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Call Calibration Function for Hydrological Model — call_cal_fn","text":"","code":"if (FALSE) { cal_output <- call_cal_fn(   cal_fn = \"DEoptim\",   hydro_data = hydro_data,   split_indices = split_data_set(...),   model = \"GR4J\",   input = create_input(...),   error_crit = \"KGE\",   cal_maximize = TRUE,   cal_q_transfo = \"none\",   do_transfo_param = TRUE,   cal_par = default_cal_par ) }"},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/create_hydromad_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a hydromad Model Object — create_hydromad_model","title":"Create a hydromad Model Object — create_hydromad_model","text":"Constructs hydromad model using specified soil moisture accounting (SMA) routine set default calibration parameters.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/create_hydromad_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a hydromad Model Object — create_hydromad_model","text":"","code":"create_hydromad_model(sma, cal_par, routing = \"expuh\")"},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/create_hydromad_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a hydromad Model Object — create_hydromad_model","text":"sma string specifying soil moisture accounting model (e.g., \"cmd\", \"gr4j\", \"sacramento\"). cal_par list calibration parameters, typically created using set_hydromad_par. Must contain lower upper bounds parameter. routing string specifying routing model (default \"expuh\").","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/create_hydromad_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a hydromad Model Object — create_hydromad_model","text":"hydromad model object parameter ranges set.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/create_hydromad_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a hydromad Model Object — create_hydromad_model","text":"function initializes hydromad model data updates parameter bounds provided cal_par. useful preparing model structure calibration.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/create_hydromad_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a hydromad Model Object — create_hydromad_model","text":"","code":"create_hydromad_model(\"cmd\", default_cal_par[[\"cmd\"]])"},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/create_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Model Input Structure — create_input","title":"Create Model Input Structure — create_input","text":"Creates input structure tailored specified hydrological model. function supports models airGR, TUWmodel, hydromad, topmodel packages. structure content input depend model's requirements.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/create_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Model Input Structure — create_input","text":"","code":"create_input(model, BasinObs, BasinInfo)"},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/create_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Model Input Structure — create_input","text":"model string specifying hydrological model (e.g., \"GR4J\", \"TUW\", \"topmodel\"). BasinObs data frame containing time series meteorological hydrological data, typically created using load_meteo_data. BasinInfo list containing spatial catchment-specific information HypsoData, delay, topidx, depending model.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/create_input.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Model Input Structure — create_input","text":"model-specific input object, either data frame, list, S3 class, depending model type.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/create_input.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Model Input Structure — create_input","text":"airGR models, function returns object created airGR::CreateInputsModel(). TUW, TUWsnow, snowsnow, hydromad models, renamed data frame returned. topmodel, list returned including additional elements like delay topidx.","code":""},{"path":[]},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/create_input.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Model Input Structure — create_input","text":"","code":"if (FALSE) { BasinObs <- load_meteo_data(\"D:/input/airGR/HSU_2044.rds\") BasinInfo <- list(HypsoData = c(500, 600, 700), delay = 2, topidx = runif(10)) input <- create_input(\"GR4J\", BasinObs, BasinInfo) }"},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/default_cal_par.html","id":null,"dir":"Reference","previous_headings":"","what":"Default calibration parameters — default_cal_par","title":"Default calibration parameters — default_cal_par","text":"Default calibration parameters","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/default_cal_par.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default calibration parameters — default_cal_par","text":"","code":"default_cal_par"},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/default_cal_par.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Default calibration parameters — default_cal_par","text":"object class list length 17.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/find_monthly_indices.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Monthly Indices in a Date Vector — find_monthly_indices","title":"Find Monthly Indices in a Date Vector — find_monthly_indices","text":"Returns indices dates fall within specified months. Useful subsetting time series data month.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/find_monthly_indices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Monthly Indices in a Date Vector — find_monthly_indices","text":"","code":"find_monthly_indices(date, months, ind = seq_along(date))"},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/find_monthly_indices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Monthly Indices in a Date Vector — find_monthly_indices","text":"date vector dates (e.g., Date, POSIXt). months character vector two-digit month strings (e.g., c(\"02\", \"03\")). ind optional vector indices used subset input date vector filtering. Defaults indices date vector.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/find_monthly_indices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Monthly Indices in a Date Vector — find_monthly_indices","text":"integer vector indices corresponding ","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/get_family.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the Family or Package of a Hydrological Model — get_family","title":"Get the Family or Package of a Hydrological Model — get_family","text":"Performs reverse lookup identify package model family associated given hydrological model name.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/get_family.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the Family or Package of a Hydrological Model — get_family","text":"","code":"get_family(model_str)"},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/get_family.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the Family or Package of a Hydrological Model — get_family","text":"model_str string specifying name hydrological model (e.g., \"GR4J\").","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/get_family.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the Family or Package of a Hydrological Model — get_family","text":"string indicating model's package family name. Returns \"none\" model found.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/get_family.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the Family or Package of a Hydrological Model — get_family","text":"","code":"get_family(\"GR4J\") #> [1] \"airGR\" get_family(\"UnknownModel\") #> [1] \"none\""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/hydro_family.html","id":null,"dir":"Reference","previous_headings":"","what":"Hydrofamily or Package — hydro_family","title":"Hydrofamily or Package — hydro_family","text":"Hydrofamily Package","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/hydro_family.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hydrofamily or Package — hydro_family","text":"","code":"hydro_family"},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/hydro_family.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Hydrofamily or Package — hydro_family","text":"object class data.frame 16 rows 2 columns.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/input_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Input data for the hydrological models in vignette — input_data","title":"Input data for the hydrological models in vignette — input_data","text":"Precipitation, temperature, potential evaporation observed discharge","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/input_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Input data for the hydrological models in vignette — input_data","text":"","code":"input_data"},{"path":[]},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/input_data.html","id":"input-data","dir":"Reference","previous_headings":"","what":"input_data","title":"Input data for the hydrological models in vignette — input_data","text":"data frame 148,530 rows 7 columns: HSU_ID ID catchment used federal office environment (FOEN) DatesR Dates P Precipitation mm/d T Temperature deg Celsius E Potential evaporation mm/d Qm3s observed discharge m3/s Qmm observed discharge mm/d","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/input_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Input data for the hydrological models in vignette — input_data","text":"https://www.meteoswiss.admin.ch/climate/-climate--switzerland/spatial-climate-analyses.html https://www.bafu.admin.ch/bafu/en/home/topics/water/data--maps/water-monitoring-data/hydrological-data-service--watercourses--lakes.html","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/KGEtang.html","id":null,"dir":"Reference","previous_headings":"","what":"Kling-Gupta Efficiency (KGE'') after Tang et al. (2021) — KGEtang","title":"Kling-Gupta Efficiency (KGE'') after Tang et al. (2021) — KGEtang","text":"Computes modified Kling-Gupta Efficiency (KGE) proposed Tang et al. (2021), https://doi.org/10.1175/jcli-d-21-0067.1, Equation (5)","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/KGEtang.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kling-Gupta Efficiency (KGE'') after Tang et al. (2021) — KGEtang","text":"","code":"KGEtang(Qsim, Qobs, single_output = TRUE, ...)"},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/KGEtang.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kling-Gupta Efficiency (KGE'') after Tang et al. (2021) — KGEtang","text":"Qsim numeric vector simulated runoff values. Qobs numeric vector observed runoff values. single_output boolean single combined components output","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/load_meteo_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Load Meteorological Data — load_meteo_data","title":"Load Meteorological Data — load_meteo_data","text":"Loads data frame stored .rds file containing meteorological data formatted similar airGR model family. input must include specific columns described .","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/load_meteo_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load Meteorological Data — load_meteo_data","text":"","code":"load_meteo_data(file, tzone = \"UTC\")"},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/load_meteo_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load Meteorological Data — load_meteo_data","text":"file string specifying path .rds file containing meteorological data. tzone string specifying time zone assign DatesR column. \"UTC\" (default), Date vector converted another time zone.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/load_meteo_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load Meteorological Data — load_meteo_data","text":"data frame named BasinObs containing loaded time-adjusted data.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/load_meteo_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load Meteorological Data — load_meteo_data","text":"input data frame must contain following columns: DatesR: Dates Date POSIXt format P: Average precipitation [mm/day] T: Catchment average air temperature [°C] E: Catchment average potential evapotranspiration [mm/day] Qmm: Outlet discharge [mm/day] information required format, see airGR documentation: https://hydrogr.github.io/airGR/page_1_get_started.html","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/load_meteo_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load Meteorological Data — load_meteo_data","text":"","code":"if (FALSE) { load_meteo_data(\"D:/input/airGR/HSU_2044.rds\") }"},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/merge_snow_runoff_sim.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge Snow and Runoff Simulation Results — merge_snow_runoff_sim","title":"Merge Snow and Runoff Simulation Results — merge_snow_runoff_sim","text":"Combines output snow module simulation results hydrological runoff simulation. Adds snow-related variables snow model metadata runoff simulation results.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/merge_snow_runoff_sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge Snow and Runoff Simulation Results — merge_snow_runoff_sim","text":"","code":"merge_snow_runoff_sim(simulation_results, snow_module_results)"},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/merge_snow_runoff_sim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge Snow and Runoff Simulation Results — merge_snow_runoff_sim","text":"simulation_results list returned simulate_model, containing simulated runoff related metadata. snow_module_results list returned simulate_snow, containing snow-related outputs SWE, melt, precipitation components.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/merge_snow_runoff_sim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge Snow and Runoff Simulation Results — merge_snow_runoff_sim","text":"list identical simulation_results, additional elements: SWE: Snow water equivalent. psolid: Solid precipitation. pliquid: Liquid precipitation. melt: Meltwater. surface_water_runoff: Combined snow runoff. more_info$snow_module: Snow model output metadata.","code":""},{"path":[]},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/merge_snow_runoff_sim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge Snow and Runoff Simulation Results — merge_snow_runoff_sim","text":"","code":"if (FALSE) { merged_results <- merge_snow_runoff_sim(simulation_results, snow_module_results) }"},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/norm_minmax.html","id":null,"dir":"Reference","previous_headings":"","what":"Min-Max Normalization and Re-Transformation — norm_minmax","title":"Min-Max Normalization and Re-Transformation — norm_minmax","text":"Scales numeric data [0, 1] range using min-max normalization, re-transforms normalized data back original scale. behavior depends specified direction.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/norm_minmax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Min-Max Normalization and Re-Transformation — norm_minmax","text":"","code":"norm_minmax(x, min, max, direction = \"RT\")"},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/norm_minmax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Min-Max Normalization and Re-Transformation — norm_minmax","text":"x numeric vector, matrix, array scaled re-transformed. min minimum value used scaling. Required directions, typically set min(x) direction = \"RT\". max maximum value used scaling. Required directions, typically set max(x) direction = \"RT\". direction character string indicating direction transformation: \"RT\" (real transformed) normalization, \"TR\" (transformed real) re-scaling. Default \"RT\".","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/norm_minmax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Min-Max Normalization and Re-Transformation — norm_minmax","text":"numeric object shape x, either normalized ","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/optim_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Objective Function for Hydrological Model Calibration — optim_fn","title":"Objective Function for Hydrological Model Calibration — optim_fn","text":"function used objective function model calibration. simulates hydrological model warm-calibration periods evaluates error criterion (e.g., KGE) calibration period .","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/optim_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Objective Function for Hydrological Model Calibration — optim_fn","text":"","code":"optim_fn(   ParamOptim,   hydro_data,   split_indices,   model,   input,   snow_module = NULL,   snow_input,   snow_parameters = NULL,   error_crit,   cal_maximize,   cal_q_transfo,   lambda,   do_transfo_param,   airGR_RunOptions = NULL,   airGR_RunOptions_snow_module = NULL )"},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/optim_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Objective Function for Hydrological Model Calibration — optim_fn","text":"ParamOptim numeric vector model parameters optimized. hydro_data list data frame containing observed runoff, typically loaded using load_meteo_data. split_indices list index vectors indicating warm-calibration periods, usually split_data_set. model string specifying hydrological model. input list model input data, typically created using create_input. snow_module Optional. string specifying snow module (e.g., \"CemaNeige\"). snow_input Optional. Input data snow module. snow_parameters Optional. vector fixed snow parameters. NULL, snow parameters assumed part ParamOptim. error_crit string naming error criterion function (e.g., \"KGE\"). Must compatible calc_hydroGOF hydroGOF package. cal_maximize Logical. TRUE, calibration maximizes objective function. cal_q_transfo string indicating runoff transformed (see transfo_q). lambda Optional. numeric value vector used regularization transformation. do_transfo_param Logical. TRUE, parameters transformed unit hypercube real-world values simulation. airGR_RunOptions Optional. Run options airGR models. airGR_RunOptions_snow_module Optional. Run options snow module using airGR.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/optim_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Objective Function for Hydrological Model Calibration — optim_fn","text":"single numeric value representing error criterion minimized maximized.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/optim_fn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Objective Function for Hydrological Model Calibration — optim_fn","text":"function handles parameter transformation, snow module simulation, error handling cases simulated runoff invalid (e.g., NAs zeros).","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/optim_fn.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Objective Function for Hydrological Model Calibration — optim_fn","text":"Qsim entirely NA, large penalty value (+/- 1e10) returned. Qsim zeros criterion KGE, asymptotic value 1 - sqrt(3) returned. Qsim coerced numeric ensure compatibility Qobs, especially models like TUW. Future improvements may include spatially explicit versions refined NA handling.","code":""},{"path":[]},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/optim_fn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Objective Function for Hydrological Model Calibration — optim_fn","text":"","code":"if (FALSE) { cal_results <- DEoptim::DEoptim(   fn = optim_fn,   lower = lower,   upper = upper,   control = DEoptim::DEoptim.control(NP = 50, itermax = 100),   hydro_data = hydro_data,   split_indices = split_indices,   model = \"GR4J\",   input = input,   error_crit = \"KGE\",   cal_maximize = TRUE,   cal_q_transfo = \"none\",   do_transfo_param = TRUE ) }"},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/save_airGR_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Save airGR Diagnostic Plots — save_airGR_plot","title":"Save airGR Diagnostic Plots — save_airGR_plot","text":"Generates saves diagnostic plots hydrological model simulations using airGR plotting functions. function supports airGR non-airGR models converting simulation results compatible format.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/save_airGR_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save airGR Diagnostic Plots — save_airGR_plot","text":"","code":"save_airGR_plot(   file,   model,   simulation_results,   ind = seq_along(simulation_results$date),   hydro_data = NULL )"},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/save_airGR_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save airGR Diagnostic Plots — save_airGR_plot","text":"file string specifying filename saved plot (e.g., \"airGR_plot.pdf\"). model string indicating model name (e.g., \"CemaNeigeGR4J\"), used determine model airGR family. simulation_results list containing simulation outputs, typically simulate_model. Must include least Qsim, Qobs, optionally snow-related variables like SWE, psolid, pliquid. ind vector indices specifying time period plot. Defaults full time range. hydro_data Optional list containing BasinObs BasinInfo, required model airGR family.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/save_airGR_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save airGR Diagnostic Plots — save_airGR_plot","text":"logical value indicating whether plot successfully saved.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/save_airGR_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Save airGR Diagnostic Plots — save_airGR_plot","text":"model airGR family, function reconstructs airGR::OutputsModel object using create_input simulate_model, overrides provided simulation results. snow-related outputs present, additional snow plots included.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/save_airGR_plot.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Save airGR Diagnostic Plots — save_airGR_plot","text":"Currently supports one CemaNeige snow layer. future version may support plotting without requiring Qobs.","code":""},{"path":[]},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/save_airGR_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save airGR Diagnostic Plots — save_airGR_plot","text":"","code":"save_airGR_plot(   file = \"airGR_plot.pdf\",   model = \"CemaNeigeGR4J\",   simulation_results = simulation_results,   hydro_data = hydro_data ) #> Error in save_airGR_plot(file = \"airGR_plot.pdf\", model = \"CemaNeigeGR4J\",     simulation_results = simulation_results, hydro_data = hydro_data): object 'simulation_results' not found"},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/save_cal_val_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Save Calibration and Validation Plot — save_cal_val_plot","title":"Save Calibration and Validation Plot — save_cal_val_plot","text":"Creates saves plot comparing observed simulated runoff calibration validation periods. plot includes performance metrics KGE, NSE, percent bias, displays period.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/save_cal_val_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save Calibration and Validation Plot — save_cal_val_plot","text":"","code":"save_cal_val_plot(file, BasinObs, Qsim, split_indices)"},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/save_cal_val_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save Calibration and Validation Plot — save_cal_val_plot","text":"file string specifying filename saved plot (e.g., \"cal_val.pdf\"). BasinObs data frame containing observed runoff corresponding dates, typically load_meteo_data. Must include columns Qmm DatesR. Qsim numeric vector simulated runoff values. split_indices list indices split_data_set, containing elements ind_cal ind_val calibration validation periods, respectively.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/save_cal_val_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save Calibration and Validation Plot — save_cal_val_plot","text":"logical value indicating whether plot successfully saved.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/save_cal_val_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Save Calibration and Validation Plot — save_cal_val_plot","text":"function generates two-panel plot showing observed simulated runoff calibration validation periods. also computes displays selected validation metrics using calc_validation_results. metrics shown annotations plot.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/save_cal_val_plot.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Save Calibration and Validation Plot — save_cal_val_plot","text":"Future improvements include adding seasonal rolling mean plot.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/save_cal_val_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save Calibration and Validation Plot — save_cal_val_plot","text":"","code":"save_cal_val_plot(   file = \"cal_val.pdf\",   BasinObs = BasinObs,   Qsim = simulation_results$Qsim,   split_indices = split_indices ) #> Error in save_cal_val_plot(file = \"cal_val.pdf\", BasinObs = BasinObs,     Qsim = simulation_results$Qsim, split_indices = split_indices): object 'BasinObs' not found"},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/set_airGR_par.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Default Calibration Settings for airGR Models — set_airGR_par","title":"Create Default Calibration Settings for airGR Models — set_airGR_par","text":"Generates list default calibration settings specified model airGR family. includes parameter bounds optimizer configurations DEoptim, malschains, hydroPSO.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/set_airGR_par.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Default Calibration Settings for airGR Models — set_airGR_par","text":"","code":"set_airGR_par(model)"},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/set_airGR_par.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Default Calibration Settings for airGR Models — set_airGR_par","text":"model string specifying airGR model (e.g., \"GR4J\", \"CemaNeigeGR4J\").","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/set_airGR_par.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Default Calibration Settings for airGR Models — set_airGR_par","text":"list containing: lower, upper – numeric vectors parameter bounds. nof_param – number parameters. DEoptim, malschains, hydroPSO – optimizer settings. has_snow_module – logical indicating whether model includes snow module.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/set_airGR_par.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Default Calibration Settings for airGR Models — set_airGR_par","text":"function uses CreateCalibOptions extract parameter bounds sets default configurations several optimizers. also detects whether model includes snow module based model name.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/set_airGR_par.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create Default Calibration Settings for airGR Models — set_airGR_par","text":"function supports models airGR family. error thrown otherwise.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/set_airGR_par.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Default Calibration Settings for airGR Models — set_airGR_par","text":"","code":"set_airGR_par(\"GR4J\") #> $lower #> [1]  4.585621e-05 -1.090365e+04  4.585621e-05  5.000000e-01 #>  #> $upper #> [1] 21807.30 10903.65 21807.30    20.00 #>  #> $nof_param #> [1] 4 #>  #> $DEoptim #> $DEoptim$NP #> [1] 40 #>  #> $DEoptim$itermax #> [1] 200 #>  #>  #> $malschains #> $malschains$maxEvals #> [1] 2000 #>  #>  #> $hydroPSO #> $hydroPSO$control #> $hydroPSO$control$write2disk #> [1] FALSE #>  #> $hydroPSO$control$verbose #> [1] FALSE #>  #> $hydroPSO$control$npart #> [1] 80 #>  #> $hydroPSO$control$maxit #> [1] 50 #>  #> $hydroPSO$control$reltol #> [1] 1e-10 #>  #>  #>  #> $has_snow_module #> [1] FALSE #>  set_airGR_par(\"CemaNeigeGR4J\") #> $lower #> [1]  4.585621e-05 -1.090365e+04  4.585621e-05  5.000000e-01  0.000000e+00 #> [6]  2.292810e-07 #>  #> $upper #> [1] 21807.2988 10903.6494 21807.2988    20.0000     1.0000   109.0365 #>  #> $nof_param #> [1] 6 #>  #> $DEoptim #> $DEoptim$NP #> [1] 60 #>  #> $DEoptim$itermax #> [1] 200 #>  #>  #> $malschains #> $malschains$maxEvals #> [1] 2000 #>  #>  #> $hydroPSO #> $hydroPSO$control #> $hydroPSO$control$write2disk #> [1] FALSE #>  #> $hydroPSO$control$verbose #> [1] FALSE #>  #> $hydroPSO$control$npart #> [1] 80 #>  #> $hydroPSO$control$maxit #> [1] 50 #>  #> $hydroPSO$control$reltol #> [1] 1e-10 #>  #>  #>  #> $has_snow_module #> [1] TRUE #>"},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/set_cal_par.html","id":null,"dir":"Reference","previous_headings":"","what":"Set Calibration Parameter Value — set_cal_par","title":"Set Calibration Parameter Value — set_cal_par","text":"Updates specific entry nested calibration parameter list given model.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/set_cal_par.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Calibration Parameter Value — set_cal_par","text":"","code":"set_cal_par(model, setting_name_value, cal_par)"},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/set_cal_par.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Calibration Parameter Value — set_cal_par","text":"model string specifying model name (e.g., \"TUW\"), used access corresponding sublist cal_par. setting_name_value string representing setting update, format \"sublist$parameter = value\". string parsed evaluated modify calibration settings. cal_par list containing calibration settings one models.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/set_cal_par.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set Calibration Parameter Value — set_cal_par","text":"updated calibration settings list.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/set_cal_par.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set Calibration Parameter Value — set_cal_par","text":"function uses non-standard evaluation dynamically update nested element cal_par list. useful programmatically modifying calibration settings without manually navigating list structure.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/set_cal_par.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set Calibration Parameter Value — set_cal_par","text":"","code":"cal_par_updated <- set_cal_par(\"TUW\", \"DEoptim$itermax = 5\", cal_par) #> Error in cal_par$TUW$DEoptim$itermax = 5: object 'cal_par' not found"},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/set_hydromad_par.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Default Calibration Settings for hydromad Models — set_hydromad_par","title":"Create Default Calibration Settings for hydromad Models — set_hydromad_par","text":"Generates list default calibration settings given hydromad model, including parameter bounds optimizer configurations DEoptim, malschains, hydroPSO. Supports SMA-SMA-routing model combinations.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/set_hydromad_par.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Default Calibration Settings for hydromad Models — set_hydromad_par","text":"","code":"set_hydromad_par(model, routing = \"expuh\")"},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/set_hydromad_par.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Default Calibration Settings for hydromad Models — set_hydromad_par","text":"model string specifying soil moisture accounting (SMA) model (e.g., \"gr4j\", \"sacramento\", \"snow\"), pre-defined hydromad model object. routing string specifying routing model (e.g., \"expuh\", \"lambda\"). used model string.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/set_hydromad_par.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Default Calibration Settings for hydromad Models — set_hydromad_par","text":"list containing: lower, upper – numeric vectors parameter bounds. nof_param – number parameters. routing – routing model used. DEoptim, malschains, hydroPSO – optimizer settings. has_snow_module – logical indicating whether model includes snow module.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/set_hydromad_par.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Default Calibration Settings for hydromad Models — set_hydromad_par","text":"model string provided, temporary hydromad model created using specified SMA routing. Parameter bounds extracted using getFreeParsRanges. Routing parameters added models support routing.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/set_hydromad_par.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Default Calibration Settings for hydromad Models — set_hydromad_par","text":"","code":"set_hydromad_par(\"gr4j\") #> $routing #> [1] \"expuh\" #>  #> $lower #>    x1 tau_s tau_q   v_s  #>   100     5     0     0  #>  #> $upper #>    x1 tau_s tau_q   v_s  #>  1200   100     5     1  #>  #> $nof_param #> [1] 4 #>  #> $DEoptim #> $DEoptim$NP #> [1] 40 #>  #> $DEoptim$itermax #> [1] 50 #>  #>  #> $malschains #> $malschains$maxEvals #> [1] 2000 #>  #>  #> $hydroPSO #> $hydroPSO$control #> $hydroPSO$control$write2disk #> [1] FALSE #>  #> $hydroPSO$control$verbose #> [1] FALSE #>  #> $hydroPSO$control$npart #> [1] 80 #>  #> $hydroPSO$control$maxit #> [1] 50 #>  #> $hydroPSO$control$reltol #> [1] 1e-10 #>  #>  #>  #> $has_snow_module #> [1] FALSE #>  set_hydromad_par(\"sacramento\") #> $lower #> uztwm uzfwm   uzk pctim adimp zperc  rexp lztwm lzfsm lzfpm  lzsk  lzpk pfree  #> 1e+00 1e+00 1e-01 1e-06 0e+00 1e+00 0e+00 1e+00 1e+00 1e+00 1e-02 1e-04 0e+00  #>  #> $upper #>   uztwm   uzfwm     uzk   pctim   adimp   zperc    rexp   lztwm   lzfsm   lzfpm  #>  150.00  150.00    0.50    0.10    0.40  250.00    5.00  500.00 1000.00 1000.00  #>    lzsk    lzpk   pfree  #>    0.25    0.25    0.60  #>  #> $nof_param #> [1] 13 #>  #> $DEoptim #> $DEoptim$NP #> [1] 130 #>  #> $DEoptim$itermax #> [1] 200 #>  #>  #> $malschains #> $malschains$maxEvals #> [1] 2000 #>  #>  #> $hydroPSO #> $hydroPSO$control #> $hydroPSO$control$write2disk #> [1] FALSE #>  #> $hydroPSO$control$verbose #> [1] FALSE #>  #> $hydroPSO$control$npart #> [1] 80 #>  #> $hydroPSO$control$maxit #> [1] 50 #>  #> $hydroPSO$control$reltol #> [1] 1e-10 #>  #>  #>  #> $has_snow_module #> [1] FALSE #>  set_hydromad_par(hydromad(DATA = NULL, sma = \"snow\", routing = \"expuh\")) #> Error in hydromad(DATA = NULL, sma = \"snow\", routing = \"expuh\"): could not find function \"hydromad\""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/simulate_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a Hydrological Model — simulate_model","title":"Simulate a Hydrological Model — simulate_model","text":"Simulates discharge using specified hydrological model given time period. Supports models airGR, TUWmodel, hydromad, topmodel packages. Optionally includes snow-related outputs model supports .","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/simulate_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a Hydrological Model — simulate_model","text":"","code":"simulate_model(   model,   model_param,   input,   ind = seq_along(input[[1]]),   Qobs = NULL,   airGR_RunOptions = NULL )"},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/simulate_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a Hydrological Model — simulate_model","text":"model string specifying hydrological model use. Supported models include \"TUW\", \"topmodel\", \"hydromad\" models (e.g., \"sacramento\", \"cwi\"), airGR models (e.g., \"GR4J\", \"CemaNeigeGR4J\"). model_param numeric vector model parameters specific chosen model. input list model input data, typically created using create_input. Must include time series precipitation (P), temperature (T), optionally evapotranspiration (E), well spatial data like catchment area topography. ind vector indices specifying time steps simulate. Defaults full range. Qobs Optional. vector observed discharge values include output comparison. airGR_RunOptions Optional. pre-created RunOptions object airGR models.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/simulate_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a Hydrological Model — simulate_model","text":"list containing: date: Vector simulation dates. Qsim: Simulated discharge. Qobs: Observed discharge (provided). SWE: Snow water equivalent (available). psolid: Solid precipitation (available). pliquid: Liquid precipitation (available). melt: Meltwater (available). more_info: list model-specific output.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/simulate_model.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Simulate a Hydrological Model — simulate_model","text":"airGR models, appropriate RunModel_* function called. hydromad models, missing dates filled ensure compatibility. Snow-related outputs available models simulate snow processes. Qobs provided, length must match length Qsim.","code":""},{"path":[]},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/simulate_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a Hydrological Model — simulate_model","text":"","code":"if (FALSE) { simulation_results <- simulate_model(   model = \"TUW\",   model_param = calibration_results$model_param,   input = input,   ind = split_indices$ind_cal ) }"},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/simulate_snow.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Snow Module — simulate_snow","title":"Simulate Snow Module — simulate_snow","text":"Simulates snow accumulation melt processes using specified snow module. Currently supports \"CemaNeige\" (airGR) \"TUWsnow\" (TUWmodel). Returns surface water runoff snow-related variables SWE, melt, precipitation components.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/simulate_snow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Snow Module — simulate_snow","text":"","code":"simulate_snow(   snow_module,   model_param,   input,   ind = seq_along(input[[1]]),   airGR_RunOptions = NULL )"},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/simulate_snow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Snow Module — simulate_snow","text":"snow_module string specifying snow module use. Supported options \"CemaNeige\" \"TUWsnow\". \"snowsnow\" yet implemented. model_param numeric vector snow module parameters. input list containing input data snow module, including precipitation (P), air temperature (T), optionally evapotranspiration (E). ind vector indices specifying time steps simulate. Defaults full time range. airGR_RunOptions Optional. pre-created RunOptions object airGR models.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/simulate_snow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Snow Module — simulate_snow","text":"list containing: surface_water_runoff: Simulated liquid water output (rain + melt). SWE: Snow water equivalent. psolid: Solid precipitation. pliquid: Liquid precipitation. melt: Meltwater. more_info: list additional model-specific output.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/simulate_snow.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Simulate Snow Module — simulate_snow","text":"\"CemaNeige\", function uses airGR's RunModel_CemaNeige. \"TUWsnow\", function uses TUWmodel appends constant runoff parameters. \"snowsnow\" module yet implemented due missing runoff output. Multilayer spatially distributed snowpack outputs yet supported.","code":""},{"path":[]},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/split_data_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Split a Date Vector into Warm-up, Calibration, and Validation Periods — split_data_set","title":"Split a Date Vector into Warm-up, Calibration, and Validation Periods — split_data_set","text":"Splits date vector data frame date column three time periods: warm-, calibration, validation. function allows optional adjustment calibration validation periods based presence missing data beginning time series.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/split_data_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split a Date Vector into Warm-up, Calibration, and Validation Periods — split_data_set","text":"","code":"split_data_set(   df,   start_end_date_vec,   ensure_warm_up = TRUE,   adjust_cal_end = FALSE,   adjust_val_start = FALSE )"},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/split_data_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split a Date Vector into Warm-up, Calibration, and Validation Periods — split_data_set","text":"df vector dates (e.g., Date, POSIXt) data frame containing DatesR column Qmm column (used detect first non-NA value). start_end_date_vec character vector length six, specifying start end dates warm-, calibration, validation periods, order. ensure_warm_up Logical. TRUE, adjusts warm-period start first non-NA value Qmm, applicable. Default TRUE. adjust_cal_end Logical. TRUE, end date calibration period adjusted proportionally shift warm-period, preserving original calibration--validation duration ratio. ensures calibration period remains representative even warm-period shifted due missing data. adjust_val_start Logical. TRUE, start date validation period adjusted immediately follow (potentially shifted) calibration period. ensures continuity calibration validation periods calibration end date modified.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/split_data_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split a Date Vector into Warm-up, Calibration, and Validation Periods — split_data_set","text":"list three elements: ind_warm Indices corresponding warm-period. ind_cal Indices corresponding calibration period. ind_val Indices corresponding validation period.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/split_data_set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split a Date Vector into Warm-up, Calibration, and Validation Periods — split_data_set","text":"","code":"if (FALSE) { dates <- seq(as.Date(\"2000-01-01\"), as.Date(\"2010-12-31\"), by = \"month\") df <- data.frame(DatesR = dates, Qmm = c(rep(NA, 12), runif(length(dates) - 12))) periods <- split_data_set(df, c(\"2000-01-01\", \"2002-12-31\", \"2003-01-01\", \"2006-12-31\", \"2007-01-01\", \"2010-12-31\")) }"},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/subset_simulations.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset Simulation Results by Index — subset_simulations","title":"Subset Simulation Results by Index — subset_simulations","text":"function subsets elements simulation results list specified indices. excludes \"more_info\" field default can optionally retain .","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/subset_simulations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset Simulation Results by Index — subset_simulations","text":"","code":"subset_simulations(ind, simulation_results, keep_more_info = FALSE)"},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/subset_simulations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset Simulation Results by Index — subset_simulations","text":"ind vector indices subset simulation results. simulation_results list containing simulation results, element (except \"more_info\") assumed indexable. keep_more_info Logical; TRUE, \"more_info\" field retained output. Default FALSE.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/subset_simulations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset Simulation Results by Index — subset_simulations","text":"list simulation results subset specified indices. keep_more_info TRUE, \"more_info\" field included unchanged.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/subset_simulations.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Subset Simulation Results by Index — subset_simulations","text":"function assumes elements simulation_results, except \"more_info\", can subset using provided indices. future enhancement include check ensure field indeed subsettable.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/subset_simulations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset Simulation Results by Index — subset_simulations","text":"","code":"if (FALSE) { results <- list(   data = list(1:10, 11:20, 21:30),   metrics = list(a = 1:3, b = 4:6),   more_info = list(description = \"Full simulation run\") ) subset_simulations(1:2, results, keep_more_info = TRUE) }"},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/transfo_param.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameter Transformation to and from Hypercube — transfo_param","title":"Parameter Transformation to and from Hypercube — transfo_param","text":"Transforms model parameters unit hypercube [0, 1] back, depending specified direction. airGR models, corresponding transformation functions airGR package used. models, min-max normalization approach applied using norm_minmax.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/transfo_param.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parameter Transformation to and from Hypercube — transfo_param","text":"","code":"transfo_param(   param,   direction,   model,   snow_module = NULL,   add_snow_par = FALSE,   cal_parameter = default_cal_par )"},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/transfo_param.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameter Transformation to and from Hypercube — transfo_param","text":"param numeric vector model parameters. direction character string indicating direction transformation: \"RT\" (real transformed) \"TR\" (transformed real). model character string specifying hydrological model (e.g., \"GR4J\", \"TUW\", \"CemaNeigeGR4J\"). snow_module Optional. character string specifying snow module included transformation (e.g., \"CemaNeige\"). add_snow_par Logical. TRUE, snow module parameters included transformation. Default FALSE. cal_parameter list containing calibration parameter bounds (lower upper) model snow module. Defaults default_cal_par.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/transfo_param.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parameter Transformation to and from Hypercube — transfo_param","text":"numeric vector transformed re-transformed parameters.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/transfo_param.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parameter Transformation to and from Hypercube — transfo_param","text":"Model combinations \"CemaNeigeGR4J\" supported. Parameters snow modules can also included transformed independently.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/transfo_param.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Parameter Transformation to and from Hypercube — transfo_param","text":"CemaNeigeHyst yet implemented. airGR transformation functions require airGR package installed. Future versions may include option bypass airGR transformations entirely.","code":""},{"path":[]},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/transfo_param.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parameter Transformation to and from Hypercube — transfo_param","text":"","code":"# Scale a parameter set for model \"TUW\" to [0,1] and back param <- c(1, 2, 3, -1, 1, 1, 200, 10, 1, 15, 100, 50, 2, 15, 50) scaled <- transfo_param(param, \"RT\", \"TUW\") rescaled <- transfo_param(scaled, \"TR\", \"TUW\")"},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/transfo_q.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply transformation to runoff data — transfo_q","title":"Apply transformation to runoff data — transfo_q","text":"Supports inverse, square root, power, Box-Cox transformations runoff data. Log transformation included generally recommended KGE calculations (see airGR Santos, 2018). Use Use KGEtang instead.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/transfo_q.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply transformation to runoff data — transfo_q","text":"","code":"transfo_q(Q, q_transfo_type = \"none\", lambda = 0.25, ...)"},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/transfo_q.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply transformation to runoff data — transfo_q","text":"Q numeric vector, matrix, data frame runoff values. q_transfo_type string specifying transformation type. Options : \"none\", \"sqrt\", \"inv\", \"log\", \"boxcox\", \"boxcoxsantos\", \"power\". lambda numeric value used Box-Cox power transformations. Default 0.25. ... Additional arguments passed mean(), e.g., na.rm = TRUE, used boxcoxsantos.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/transfo_q.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply transformation to runoff data — transfo_q","text":"Transformed runoff data format input.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/transfo_q.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Apply transformation to runoff data — transfo_q","text":"Consider handle infinite values resulting transformations.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/transfo_q.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply transformation to runoff data — transfo_q","text":"","code":"transfo_q(array(0:10, c(2, 5)), \"sqrt\") #>      [,1]     [,2]     [,3]     [,4]     [,5] #> [1,]    0 1.414214 2.000000 2.449490 2.828427 #> [2,]    1 1.732051 2.236068 2.645751 3.000000"},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/validate_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate model — validate_model","title":"Validate model — validate_model","text":"Calculates validation measures different transformation types","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/validate_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate model — validate_model","text":"","code":"validate_model(Qsim, Qobs, val_crit_transfo = \"KGE__none\")"},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/validate_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate model — validate_model","text":"Qsim vector simulated runoff Qobs vector observed runoff val_crit_transfo vector strings specifying validation criteria runoff transformation separated \"__\". Supported validation criteria hydroGOF package usable calc_hydroGOF function, supported runoff transformations please refer transfo_q","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/validate_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate model — validate_model","text":"long data frame columns crit indicating used validation criterion, transfo used runoff transformation value.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/validate_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate model — validate_model","text":"","code":"validate_model(   1:10, seq(2, 11),   c(\"KGE__log\", \"NSE__inv\", \"VE__none\", \"pbias__none\") ) #> # A tibble: 4 × 4 #>   crit  transfo lambda   value #>   <chr> <chr>   <chr>    <dbl> #> 1 KGE   log     NA       0.650 #> 2 NSE   inv     NA      -0.930 #> 3 VE    none    NA       0.846 #> 4 pbias none    NA     -15.4"},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/write_ascii.html","id":null,"dir":"Reference","previous_headings":"","what":"Write ASCII Summary of Calibration and Validation Results — write_ascii","title":"Write ASCII Summary of Calibration and Validation Results — write_ascii","text":"Writes plain text (ASCII) file summarizing model calibration parameters validation results. output can written either tab-separated fixed-width format.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/write_ascii.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write ASCII Summary of Calibration and Validation Results — write_ascii","text":"","code":"write_ascii(   file,   calibration_results,   validation_results,   equally_spaced = TRUE )"},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/write_ascii.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write ASCII Summary of Calibration and Validation Results — write_ascii","text":"file string specifying path output file. calibration_results list containing calibration results calibrate_model. vector calibrated model parameters (model_param) written. validation_results data frame containing validation results, typically validate_model. equally_spaced Logical; TRUE (default), attempts write fixed-width formatted file. FALSE fixed-width writing fails, tab-separated file written instead.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/write_ascii.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write ASCII Summary of Calibration and Validation Results — write_ascii","text":"logical value indicating whether file successfully written.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/write_ascii.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Write ASCII Summary of Calibration and Validation Results — write_ascii","text":"equally_spaced = TRUE, function attempts write fixed-width formatted file using write.fwf. error occurs process, falls back writing tab-separated file using write_tsv.","code":""},{"path":"https://mw-schirmer.github.io/openQUARREL/reference/write_ascii.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write ASCII Summary of Calibration and Validation Results — write_ascii","text":"","code":"write_ascii(   file = \"results.txt\",   calibration_results = calibration_results,   validation_results = validation_results ) #> Warning: restarting interrupted promise evaluation #> Error in is_grouped_df(tbl): object 'validation_results' not found"}]
